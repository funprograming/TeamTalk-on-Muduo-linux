// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_5fmsg_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_5fmsg_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fmsg_5fserver_2eproto;
namespace login_msg_server {
class IMHeartBeat;
class IMHeartBeatDefaultTypeInternal;
extern IMHeartBeatDefaultTypeInternal _IMHeartBeat_default_instance_;
class IMMsgServInfo;
class IMMsgServInfoDefaultTypeInternal;
extern IMMsgServInfoDefaultTypeInternal _IMMsgServInfo_default_instance_;
class IMMsgServRsp;
class IMMsgServRspDefaultTypeInternal;
extern IMMsgServRspDefaultTypeInternal _IMMsgServRsp_default_instance_;
class IMUserCntUpdate;
class IMUserCntUpdateDefaultTypeInternal;
extern IMUserCntUpdateDefaultTypeInternal _IMUserCntUpdate_default_instance_;
}  // namespace login_msg_server
PROTOBUF_NAMESPACE_OPEN
template<> ::login_msg_server::IMHeartBeat* Arena::CreateMaybeMessage<::login_msg_server::IMHeartBeat>(Arena*);
template<> ::login_msg_server::IMMsgServInfo* Arena::CreateMaybeMessage<::login_msg_server::IMMsgServInfo>(Arena*);
template<> ::login_msg_server::IMMsgServRsp* Arena::CreateMaybeMessage<::login_msg_server::IMMsgServRsp>(Arena*);
template<> ::login_msg_server::IMUserCntUpdate* Arena::CreateMaybeMessage<::login_msg_server::IMUserCntUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace login_msg_server {

enum UserCntUpdat : int {
  USER_CNT_NULL = 0,
  USER_CNT_INC = 1,
  USER_CNT_DEC = 2,
  UserCntUpdat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserCntUpdat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserCntUpdat_IsValid(int value);
constexpr UserCntUpdat UserCntUpdat_MIN = USER_CNT_NULL;
constexpr UserCntUpdat UserCntUpdat_MAX = USER_CNT_DEC;
constexpr int UserCntUpdat_ARRAYSIZE = UserCntUpdat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserCntUpdat_descriptor();
template<typename T>
inline const std::string& UserCntUpdat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserCntUpdat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserCntUpdat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserCntUpdat_descriptor(), enum_t_value);
}
inline bool UserCntUpdat_Parse(
    const std::string& name, UserCntUpdat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserCntUpdat>(
    UserCntUpdat_descriptor(), name, value);
}
// ===================================================================

class IMMsgServInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg_server.IMMsgServInfo) */ {
 public:
  inline IMMsgServInfo() : IMMsgServInfo(nullptr) {};
  virtual ~IMMsgServInfo();

  IMMsgServInfo(const IMMsgServInfo& from);
  IMMsgServInfo(IMMsgServInfo&& from) noexcept
    : IMMsgServInfo() {
    *this = ::std::move(from);
  }

  inline IMMsgServInfo& operator=(const IMMsgServInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgServInfo& operator=(IMMsgServInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMMsgServInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgServInfo* internal_default_instance() {
    return reinterpret_cast<const IMMsgServInfo*>(
               &_IMMsgServInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMMsgServInfo& a, IMMsgServInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgServInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgServInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServInfo* New() const final {
    return CreateMaybeMessage<IMMsgServInfo>(nullptr);
  }

  IMMsgServInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMMsgServInfo& from);
  void MergeFrom(const IMMsgServInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgServInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg_server.IMMsgServInfo";
  }
  protected:
  explicit IMMsgServInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_5fserver_2eproto);
    return ::descriptor_table_login_5fmsg_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddr1FieldNumber = 1,
    kIpAddr2FieldNumber = 2,
    kHostnameFieldNumber = 6,
    kPortFieldNumber = 3,
    kMaxConnCntFieldNumber = 4,
    kCurConnCntFieldNumber = 5,
  };
  // string ip_addr1 = 1;
  void clear_ip_addr1();
  const std::string& ip_addr1() const;
  void set_ip_addr1(const std::string& value);
  void set_ip_addr1(std::string&& value);
  void set_ip_addr1(const char* value);
  void set_ip_addr1(const char* value, size_t size);
  std::string* mutable_ip_addr1();
  std::string* release_ip_addr1();
  void set_allocated_ip_addr1(std::string* ip_addr1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_addr1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_addr1(
      std::string* ip_addr1);
  private:
  const std::string& _internal_ip_addr1() const;
  void _internal_set_ip_addr1(const std::string& value);
  std::string* _internal_mutable_ip_addr1();
  public:

  // string ip_addr2 = 2;
  void clear_ip_addr2();
  const std::string& ip_addr2() const;
  void set_ip_addr2(const std::string& value);
  void set_ip_addr2(std::string&& value);
  void set_ip_addr2(const char* value);
  void set_ip_addr2(const char* value, size_t size);
  std::string* mutable_ip_addr2();
  std::string* release_ip_addr2();
  void set_allocated_ip_addr2(std::string* ip_addr2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_addr2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_addr2(
      std::string* ip_addr2);
  private:
  const std::string& _internal_ip_addr2() const;
  void _internal_set_ip_addr2(const std::string& value);
  std::string* _internal_mutable_ip_addr2();
  public:

  // string hostname = 6;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_conn_cnt = 4;
  void clear_max_conn_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_conn_cnt() const;
  void set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_conn_cnt() const;
  void _internal_set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cur_conn_cnt = 5;
  void clear_cur_conn_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_conn_cnt() const;
  void set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_conn_cnt() const;
  void _internal_set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg_server.IMMsgServInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_conn_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_conn_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class IMUserCntUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg_server.IMUserCntUpdate) */ {
 public:
  inline IMUserCntUpdate() : IMUserCntUpdate(nullptr) {};
  virtual ~IMUserCntUpdate();

  IMUserCntUpdate(const IMUserCntUpdate& from);
  IMUserCntUpdate(IMUserCntUpdate&& from) noexcept
    : IMUserCntUpdate() {
    *this = ::std::move(from);
  }

  inline IMUserCntUpdate& operator=(const IMUserCntUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUserCntUpdate& operator=(IMUserCntUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUserCntUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUserCntUpdate* internal_default_instance() {
    return reinterpret_cast<const IMUserCntUpdate*>(
               &_IMUserCntUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMUserCntUpdate& a, IMUserCntUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUserCntUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUserCntUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUserCntUpdate* New() const final {
    return CreateMaybeMessage<IMUserCntUpdate>(nullptr);
  }

  IMUserCntUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUserCntUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUserCntUpdate& from);
  void MergeFrom(const IMUserCntUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUserCntUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg_server.IMUserCntUpdate";
  }
  protected:
  explicit IMUserCntUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_5fserver_2eproto);
    return ::descriptor_table_login_5fmsg_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserActionFieldNumber = 1,
  };
  // uint32 user_action = 1;
  void clear_user_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_action() const;
  void set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_action() const;
  void _internal_set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg_server.IMUserCntUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class IMMsgServRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg_server.IMMsgServRsp) */ {
 public:
  inline IMMsgServRsp() : IMMsgServRsp(nullptr) {};
  virtual ~IMMsgServRsp();

  IMMsgServRsp(const IMMsgServRsp& from);
  IMMsgServRsp(IMMsgServRsp&& from) noexcept
    : IMMsgServRsp() {
    *this = ::std::move(from);
  }

  inline IMMsgServRsp& operator=(const IMMsgServRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgServRsp& operator=(IMMsgServRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMMsgServRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgServRsp* internal_default_instance() {
    return reinterpret_cast<const IMMsgServRsp*>(
               &_IMMsgServRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMMsgServRsp& a, IMMsgServRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgServRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgServRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServRsp* New() const final {
    return CreateMaybeMessage<IMMsgServRsp>(nullptr);
  }

  IMMsgServRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMMsgServRsp& from);
  void MergeFrom(const IMMsgServRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgServRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg_server.IMMsgServRsp";
  }
  protected:
  explicit IMMsgServRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_5fserver_2eproto);
    return ::descriptor_table_login_5fmsg_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorIpFieldNumber = 2,
    kBackipIpFieldNumber = 3,
    kResultCodeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string prior_ip = 2;
  void clear_prior_ip();
  const std::string& prior_ip() const;
  void set_prior_ip(const std::string& value);
  void set_prior_ip(std::string&& value);
  void set_prior_ip(const char* value);
  void set_prior_ip(const char* value, size_t size);
  std::string* mutable_prior_ip();
  std::string* release_prior_ip();
  void set_allocated_prior_ip(std::string* prior_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prior_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prior_ip(
      std::string* prior_ip);
  private:
  const std::string& _internal_prior_ip() const;
  void _internal_set_prior_ip(const std::string& value);
  std::string* _internal_mutable_prior_ip();
  public:

  // string backip_ip = 3;
  void clear_backip_ip();
  const std::string& backip_ip() const;
  void set_backip_ip(const std::string& value);
  void set_backip_ip(std::string&& value);
  void set_backip_ip(const char* value);
  void set_backip_ip(const char* value, size_t size);
  std::string* mutable_backip_ip();
  std::string* release_backip_ip();
  void set_allocated_backip_ip(std::string* backip_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_backip_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_backip_ip(
      std::string* backip_ip);
  private:
  const std::string& _internal_backip_ip() const;
  void _internal_set_backip_ip(const std::string& value);
  std::string* _internal_mutable_backip_ip();
  public:

  // int32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::int32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg_server.IMMsgServRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prior_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backip_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class IMHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg_server.IMHeartBeat) */ {
 public:
  inline IMHeartBeat() : IMHeartBeat(nullptr) {};
  virtual ~IMHeartBeat();

  IMHeartBeat(const IMHeartBeat& from);
  IMHeartBeat(IMHeartBeat&& from) noexcept
    : IMHeartBeat() {
    *this = ::std::move(from);
  }

  inline IMHeartBeat& operator=(const IMHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMHeartBeat& operator=(IMHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMHeartBeat* internal_default_instance() {
    return reinterpret_cast<const IMHeartBeat*>(
               &_IMHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMHeartBeat& a, IMHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(IMHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMHeartBeat* New() const final {
    return CreateMaybeMessage<IMHeartBeat>(nullptr);
  }

  IMHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMHeartBeat& from);
  void MergeFrom(const IMHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg_server.IMHeartBeat";
  }
  protected:
  explicit IMHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_5fmsg_5fserver_2eproto);
    return ::descriptor_table_login_5fmsg_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:login_msg_server.IMHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fmsg_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMMsgServInfo

// string ip_addr1 = 1;
inline void IMMsgServInfo::clear_ip_addr1() {
  ip_addr1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMMsgServInfo::ip_addr1() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServInfo.ip_addr1)
  return _internal_ip_addr1();
}
inline void IMMsgServInfo::set_ip_addr1(const std::string& value) {
  _internal_set_ip_addr1(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServInfo.ip_addr1)
}
inline std::string* IMMsgServInfo::mutable_ip_addr1() {
  // @@protoc_insertion_point(field_mutable:login_msg_server.IMMsgServInfo.ip_addr1)
  return _internal_mutable_ip_addr1();
}
inline const std::string& IMMsgServInfo::_internal_ip_addr1() const {
  return ip_addr1_.Get();
}
inline void IMMsgServInfo::_internal_set_ip_addr1(const std::string& value) {
  
  ip_addr1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMMsgServInfo::set_ip_addr1(std::string&& value) {
  
  ip_addr1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:login_msg_server.IMMsgServInfo.ip_addr1)
}
inline void IMMsgServInfo::set_ip_addr1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_addr1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:login_msg_server.IMMsgServInfo.ip_addr1)
}
inline void IMMsgServInfo::set_ip_addr1(const char* value,
    size_t size) {
  
  ip_addr1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:login_msg_server.IMMsgServInfo.ip_addr1)
}
inline std::string* IMMsgServInfo::_internal_mutable_ip_addr1() {
  
  return ip_addr1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMMsgServInfo::release_ip_addr1() {
  // @@protoc_insertion_point(field_release:login_msg_server.IMMsgServInfo.ip_addr1)
  return ip_addr1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMMsgServInfo::set_allocated_ip_addr1(std::string* ip_addr1) {
  if (ip_addr1 != nullptr) {
    
  } else {
    
  }
  ip_addr1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_addr1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:login_msg_server.IMMsgServInfo.ip_addr1)
}
inline std::string* IMMsgServInfo::unsafe_arena_release_ip_addr1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:login_msg_server.IMMsgServInfo.ip_addr1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_addr1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IMMsgServInfo::unsafe_arena_set_allocated_ip_addr1(
    std::string* ip_addr1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_addr1 != nullptr) {
    
  } else {
    
  }
  ip_addr1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_addr1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:login_msg_server.IMMsgServInfo.ip_addr1)
}

// string ip_addr2 = 2;
inline void IMMsgServInfo::clear_ip_addr2() {
  ip_addr2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMMsgServInfo::ip_addr2() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServInfo.ip_addr2)
  return _internal_ip_addr2();
}
inline void IMMsgServInfo::set_ip_addr2(const std::string& value) {
  _internal_set_ip_addr2(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServInfo.ip_addr2)
}
inline std::string* IMMsgServInfo::mutable_ip_addr2() {
  // @@protoc_insertion_point(field_mutable:login_msg_server.IMMsgServInfo.ip_addr2)
  return _internal_mutable_ip_addr2();
}
inline const std::string& IMMsgServInfo::_internal_ip_addr2() const {
  return ip_addr2_.Get();
}
inline void IMMsgServInfo::_internal_set_ip_addr2(const std::string& value) {
  
  ip_addr2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMMsgServInfo::set_ip_addr2(std::string&& value) {
  
  ip_addr2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:login_msg_server.IMMsgServInfo.ip_addr2)
}
inline void IMMsgServInfo::set_ip_addr2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_addr2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:login_msg_server.IMMsgServInfo.ip_addr2)
}
inline void IMMsgServInfo::set_ip_addr2(const char* value,
    size_t size) {
  
  ip_addr2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:login_msg_server.IMMsgServInfo.ip_addr2)
}
inline std::string* IMMsgServInfo::_internal_mutable_ip_addr2() {
  
  return ip_addr2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMMsgServInfo::release_ip_addr2() {
  // @@protoc_insertion_point(field_release:login_msg_server.IMMsgServInfo.ip_addr2)
  return ip_addr2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMMsgServInfo::set_allocated_ip_addr2(std::string* ip_addr2) {
  if (ip_addr2 != nullptr) {
    
  } else {
    
  }
  ip_addr2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_addr2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:login_msg_server.IMMsgServInfo.ip_addr2)
}
inline std::string* IMMsgServInfo::unsafe_arena_release_ip_addr2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:login_msg_server.IMMsgServInfo.ip_addr2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_addr2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IMMsgServInfo::unsafe_arena_set_allocated_ip_addr2(
    std::string* ip_addr2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_addr2 != nullptr) {
    
  } else {
    
  }
  ip_addr2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_addr2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:login_msg_server.IMMsgServInfo.ip_addr2)
}

// uint32 port = 3;
inline void IMMsgServInfo::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::port() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServInfo.port)
  return _internal_port();
}
inline void IMMsgServInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void IMMsgServInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServInfo.port)
}

// uint32 max_conn_cnt = 4;
inline void IMMsgServInfo::clear_max_conn_cnt() {
  max_conn_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::_internal_max_conn_cnt() const {
  return max_conn_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::max_conn_cnt() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServInfo.max_conn_cnt)
  return _internal_max_conn_cnt();
}
inline void IMMsgServInfo::_internal_set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_conn_cnt_ = value;
}
inline void IMMsgServInfo::set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_conn_cnt(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServInfo.max_conn_cnt)
}

// uint32 cur_conn_cnt = 5;
inline void IMMsgServInfo::clear_cur_conn_cnt() {
  cur_conn_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::_internal_cur_conn_cnt() const {
  return cur_conn_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::cur_conn_cnt() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServInfo.cur_conn_cnt)
  return _internal_cur_conn_cnt();
}
inline void IMMsgServInfo::_internal_set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_conn_cnt_ = value;
}
inline void IMMsgServInfo::set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_conn_cnt(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServInfo.cur_conn_cnt)
}

// string hostname = 6;
inline void IMMsgServInfo::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMMsgServInfo::hostname() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServInfo.hostname)
  return _internal_hostname();
}
inline void IMMsgServInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServInfo.hostname)
}
inline std::string* IMMsgServInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:login_msg_server.IMMsgServInfo.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& IMMsgServInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void IMMsgServInfo::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMMsgServInfo::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:login_msg_server.IMMsgServInfo.hostname)
}
inline void IMMsgServInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:login_msg_server.IMMsgServInfo.hostname)
}
inline void IMMsgServInfo::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:login_msg_server.IMMsgServInfo.hostname)
}
inline std::string* IMMsgServInfo::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMMsgServInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:login_msg_server.IMMsgServInfo.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMMsgServInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:login_msg_server.IMMsgServInfo.hostname)
}
inline std::string* IMMsgServInfo::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:login_msg_server.IMMsgServInfo.hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IMMsgServInfo::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:login_msg_server.IMMsgServInfo.hostname)
}

// -------------------------------------------------------------------

// IMUserCntUpdate

// uint32 user_action = 1;
inline void IMUserCntUpdate::clear_user_action() {
  user_action_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserCntUpdate::_internal_user_action() const {
  return user_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserCntUpdate::user_action() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMUserCntUpdate.user_action)
  return _internal_user_action();
}
inline void IMUserCntUpdate::_internal_set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_action_ = value;
}
inline void IMUserCntUpdate::set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_action(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMUserCntUpdate.user_action)
}

// -------------------------------------------------------------------

// IMMsgServRsp

// int32 result_code = 1;
inline void IMMsgServRsp::clear_result_code() {
  result_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMMsgServRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMMsgServRsp::result_code() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServRsp.result_code)
  return _internal_result_code();
}
inline void IMMsgServRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_code_ = value;
}
inline void IMMsgServRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServRsp.result_code)
}

// string prior_ip = 2;
inline void IMMsgServRsp::clear_prior_ip() {
  prior_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMMsgServRsp::prior_ip() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServRsp.prior_ip)
  return _internal_prior_ip();
}
inline void IMMsgServRsp::set_prior_ip(const std::string& value) {
  _internal_set_prior_ip(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServRsp.prior_ip)
}
inline std::string* IMMsgServRsp::mutable_prior_ip() {
  // @@protoc_insertion_point(field_mutable:login_msg_server.IMMsgServRsp.prior_ip)
  return _internal_mutable_prior_ip();
}
inline const std::string& IMMsgServRsp::_internal_prior_ip() const {
  return prior_ip_.Get();
}
inline void IMMsgServRsp::_internal_set_prior_ip(const std::string& value) {
  
  prior_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMMsgServRsp::set_prior_ip(std::string&& value) {
  
  prior_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:login_msg_server.IMMsgServRsp.prior_ip)
}
inline void IMMsgServRsp::set_prior_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prior_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:login_msg_server.IMMsgServRsp.prior_ip)
}
inline void IMMsgServRsp::set_prior_ip(const char* value,
    size_t size) {
  
  prior_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:login_msg_server.IMMsgServRsp.prior_ip)
}
inline std::string* IMMsgServRsp::_internal_mutable_prior_ip() {
  
  return prior_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMMsgServRsp::release_prior_ip() {
  // @@protoc_insertion_point(field_release:login_msg_server.IMMsgServRsp.prior_ip)
  return prior_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMMsgServRsp::set_allocated_prior_ip(std::string* prior_ip) {
  if (prior_ip != nullptr) {
    
  } else {
    
  }
  prior_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prior_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:login_msg_server.IMMsgServRsp.prior_ip)
}
inline std::string* IMMsgServRsp::unsafe_arena_release_prior_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:login_msg_server.IMMsgServRsp.prior_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prior_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IMMsgServRsp::unsafe_arena_set_allocated_prior_ip(
    std::string* prior_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prior_ip != nullptr) {
    
  } else {
    
  }
  prior_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prior_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:login_msg_server.IMMsgServRsp.prior_ip)
}

// string backip_ip = 3;
inline void IMMsgServRsp::clear_backip_ip() {
  backip_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMMsgServRsp::backip_ip() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServRsp.backip_ip)
  return _internal_backip_ip();
}
inline void IMMsgServRsp::set_backip_ip(const std::string& value) {
  _internal_set_backip_ip(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServRsp.backip_ip)
}
inline std::string* IMMsgServRsp::mutable_backip_ip() {
  // @@protoc_insertion_point(field_mutable:login_msg_server.IMMsgServRsp.backip_ip)
  return _internal_mutable_backip_ip();
}
inline const std::string& IMMsgServRsp::_internal_backip_ip() const {
  return backip_ip_.Get();
}
inline void IMMsgServRsp::_internal_set_backip_ip(const std::string& value) {
  
  backip_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMMsgServRsp::set_backip_ip(std::string&& value) {
  
  backip_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:login_msg_server.IMMsgServRsp.backip_ip)
}
inline void IMMsgServRsp::set_backip_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backip_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:login_msg_server.IMMsgServRsp.backip_ip)
}
inline void IMMsgServRsp::set_backip_ip(const char* value,
    size_t size) {
  
  backip_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:login_msg_server.IMMsgServRsp.backip_ip)
}
inline std::string* IMMsgServRsp::_internal_mutable_backip_ip() {
  
  return backip_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMMsgServRsp::release_backip_ip() {
  // @@protoc_insertion_point(field_release:login_msg_server.IMMsgServRsp.backip_ip)
  return backip_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMMsgServRsp::set_allocated_backip_ip(std::string* backip_ip) {
  if (backip_ip != nullptr) {
    
  } else {
    
  }
  backip_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backip_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:login_msg_server.IMMsgServRsp.backip_ip)
}
inline std::string* IMMsgServRsp::unsafe_arena_release_backip_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:login_msg_server.IMMsgServRsp.backip_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return backip_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IMMsgServRsp::unsafe_arena_set_allocated_backip_ip(
    std::string* backip_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (backip_ip != nullptr) {
    
  } else {
    
  }
  backip_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      backip_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:login_msg_server.IMMsgServRsp.backip_ip)
}

// uint32 port = 4;
inline void IMMsgServRsp::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServRsp::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServRsp::port() const {
  // @@protoc_insertion_point(field_get:login_msg_server.IMMsgServRsp.port)
  return _internal_port();
}
inline void IMMsgServRsp::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void IMMsgServRsp::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:login_msg_server.IMMsgServRsp.port)
}

// -------------------------------------------------------------------

// IMHeartBeat

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login_msg_server

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::login_msg_server::UserCntUpdat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::login_msg_server::UserCntUpdat>() {
  return ::login_msg_server::UserCntUpdat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_5fserver_2eproto
